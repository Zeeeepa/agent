# OpenAI API key / Ключ API OpenAI
OPENAI_API_KEY=

# Initial pulse value — higher allows more errors before stopping 
# Начальное значение «pulse» — чем выше, тем больше ошибок агент может допустить, прежде чем остановится
PULSE=120

# Timeout (seconds) before the agent starts thinking automatically 
# Таймаут (в секундах) ожидания ответа пользователя, после чего агент начнет думать сам
TIMEOUT=1000

# Optional SOCKS5/HTTP proxy for OpenAI requests 
# Необязательный SOCKS5/HTTP-прокси для запросов к OpenAI
# PROXY=socks5://127.0.0.1:12334

# Model override (optional). If not set, SDK default is used. 
# Переопределение модели (необязательно). Если не указано, используется значение SDK по умолчанию
# Example / Пример: gpt-5
OPENAI_MODEL=gpt-4.1

# Optional: Pre-existing OpenAI Vector Store ID(s) for RAG queries 
# Необязательные ID уже созданных OpenAI Vector Store для RAG-запросов
# Used by jinx/rag_service.py when attaching your knowledge base to responses 
# Используется в jinx/rag_service.py для подключения базы знаний к ответам
# Obtain from https://platform.openai.com/storage/vector-stores 
# Получить можно на https://platform.openai.com/storage/vector-stores
#
# Provide one or multiple IDs via OPENAI_VECTOR_STORE_ID 
# Укажите один или несколько ID через OPENAI_VECTOR_STORE_ID
# Multiple IDs should be comma-separated; spaces are allowed and will be trimmed 
# Несколько ID — через запятую; пробелы допустимы и будут обрезаны
# Example single / Пример (один):  OPENAI_VECTOR_STORE_ID=vs_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
# Example multiple / Пример (несколько): OPENAI_VECTOR_STORE_ID=vs_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,vs_bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
OPENAI_VECTOR_STORE_ID=

# Optional: Force File Search tool to be called (instead of auto) 
# Необязательно: принудительный вызов инструмента File Search (вместо автоматического выбора)
# Set "true" (case-insensitive) to enable; empty/other = off 
# Установите "true" (регистр не важен) для включения; пусто/другое — выключено
# Default: off / По умолчанию: выключено
# Example / Пример:
# OPENAI_FORCE_FILE_SEARCH=true
OPENAI_FORCE_FILE_SEARCH=

# -------------------------------
# Project Code Embeddings (emb/)
# -------------------------------
# Enable automatic embeddings for the project codebase (stored under emb/) 
# Включить автоматическую генерацию эмбеддингов для кода проекта (папка emb/)
EMBED_PROJECT_ENABLE=true

# Root to scan (default: current working directory) 
# Корневая директория для сканирования (по умолчанию — текущая рабочая директория)
EMBED_PROJECT_ROOT=.

# (Advanced snippet controls are set to smart defaults in code; no need to tweak .env)
# (Расширенные параметры сниппетов уже оптимизированы в коде; править .env не требуется)

# -----------------------------------------------
# Chained Reasoning / Цепное мышление (План + Рефлексия)
# -----------------------------------------------
# Enable planner brain (master switch). Default: ON (true) 
# Включить «мозг планировщика» (главный переключатель). По умолчанию: ВКЛ (true)
JINX_CHAINED_REASONING=true
# Enable reflection stage after the plan (optional). Default: OFF (false) 
# Включить этап рефлексии после плана (необязательно). По умолчанию: выкл (false)
JINX_CHAINED_REFLECT=true

# ADVISORY mode (soft guidance): 
# Режим ADVISORY (мягкое руководство):
# In this mode, planner/reflect don’t enforce steps and code (no plan.*), 
# В этом режиме planner/reflect не навязывают шаги и код (без plan.*),
# but provide soft guidance (<plan_guidance>): clarifications, assumptions, context, reminders. 
# а формируют мягкие подсказки (<plan_guidance>): уточнения, допущения, контекст, напоминания.
# Main logic stays in burning_logic. 
# Основная логика остаётся в burning_logic.
JINX_CHAINED_ADVISORY=true

# Gate for enabling chain: default DISABLED (planner always enabled) 
# Гейт для включения цепочки: по умолчанию ОТКЛЮЧЕН (планировщик всегда включен)
# Can be re-enabled to restrict chain length or "code-likeness" 
# Можно включить обратно, чтобы ограничить цепочку по длине или «похожести на код»
JINX_CHAINED_MIN_LEN=0
JINX_CHAINED_REQUIRE_CODEY=false

# Tiny embedding support for planner input (stabilizes and speeds up) 
# Крошечная опора из эмбеддингов для входа планировщика (ускоряет и стабилизирует работу)
JINX_CHAINED_PRE_EVID=true
JINX_CHAINED_PRE_DIALOG_K=2
JINX_CHAINED_PRE_CODE_K=2
JINX_CHAINED_PRE_DIALOG_MS=100
JINX_CHAINED_PRE_CODE_MS=180

# Budgets for extra context after the plan (per sub-queries) 
# Бюджеты на дополнительный контекст после плана (по подзапросам)
JINX_CHAINED_DIALOG_CTX_MS=140
JINX_CHAINED_PROJECT_CTX_MS=500

# Evidence aggregation for reflection/metrics 
# Агрегация «доказательств» (evidence) для рефлексии и метрик
JINX_CHAINED_EVID_DIALOG_K=3
JINX_CHAINED_EVID_CODE_K=3
JINX_CHAINED_EVID_DIALOG_MS=120
JINX_CHAINED_EVID_CODE_MS=220

# Plan size limits (to fit tight RT constraints) 
# Ограничения на размер плана (чтобы укладываться в жесткие RT-границы)
JINX_CHAINED_MAX_STEPS=3
JINX_CHAINED_MAX_SUBS=2
JINX_CHAINED_MAX_RISKS=3

# Extra blocks in context (optional) 
# Дополнительные блоки в контексте (можно включать/выключать по вкусу)
# <plan_cortex> — inner personal hints (persona, mood, doubt) 
# <plan_cortex> — внутренние персональные подсказки (персона, настрой, сомнения)
JINX_CHAINED_INCLUDE_CORTEX=true
# <plan_warnings> — structural quality hints 
# <plan_warnings> — структурные подсказки качества плана
JINX_CHAINED_INCLUDE_WARNINGS=true
# <plan_citations> — compact citations from embeddings 
# <plan_citations> — компактные ссылки на источники из эмбеддингов
JINX_CHAINED_INCLUDE_CITATIONS=true
# <plan_metrics> — counters and averages for observability 
# <plan_metrics> — счетчики и средние баллы для наблюдаемости
JINX_CHAINED_INCLUDE_METRICS=false

# Diagnostics/development 
# Диагностика и разработка
# Local echo-preview of final context in logs (BLUE_WHISPERS) 
# Локальное эхо-превью финального контекста в логи (BLUE_WHISPERS)
JINX_CHAINED_DEV_ECHO=false
# Trace JSONL in log/plan_trace.jsonl 
# Трассировка JSONL в log/plan_trace.jsonl
JINX_CHAINED_TRACE=false

# Resilience: error counter and auto-disable for a while 
# Устойчивость: счетчик ошибок и авто-«выключение» на время
JINX_CHAINED_FAIL_THRESHOLD=3
JINX_CHAINED_DISABLE_MS=60000

# Save "brain" and memory in project for embeddings (reminders of forgotten plans) 
# Сохранение «мозга» и памяти в проект для эмбеддингов (напоминание о забытых планах)
JINX_CHAINED_PERSIST_BRAIN=true
JINX_BRAIN_DIR=.jinx/brain
JINX_PERSIST_MEMORY=true
JINX_MEMORY_DIR=.jinx/memory

# -----------------------------------------------
# Continuity & State Frames / Непрерывность и Снимки состояния
# -----------------------------------------------
# Enable continuity layer: short clarifications merged with past Qs, 
# Включить слой непрерывности: короткие уточнения склеиваются с прошлыми вопросами,
# project context cached, anchors extracted from transcript (questions/symbols/paths). 
# кэшируется контекст проекта, извлекаются якоря из стенограммы (вопросы/символы/пути).
JINX_CONTINUITY_ENABLE=true
# Length threshold for "short clarification" (characters) 
# Порог длины для «короткого уточнения» (в символах)
JINX_CONTINUITY_SHORTLEN=80

# StateFrames switch — compact state snapshots (intent+anchors+guidance), 
# Переключатель StateFrames — компактные снимки состояния (намерение+якоря+подсказки),
# stored in embeddings (source="state"). Helps continue thoughts on later turns. 
# сохраняются в эмбеддинги (source="state"). Помогает продолжать мысль на следующих ходах.
JINX_STATEFRAME_ENABLE=true
# Boost weight of "state" for short queries (multiplier) 
# Усиление веса «state» при коротких запросах (множитель)
EMBED_STATE_BOOST=1.1
EMBED_STATE_RECENCY_MULT=0.5

# TTL for continuity cache (ms). Default: 10 minutes. 
# TTL кэша непрерывности (мс). По умолчанию: 10 минут
JINX_CONTINUITY_CACHE_TTL_MS=600000
# Topic shift detection for short clarifications: reduces continuity/state influence if task changes sharply 
# Проверка смены темы (topic shift) для коротких уточнений: снижает влияние continuity/state при резкой смене задачи
JINX_TOPIC_SHIFT_CHECK=true
# Evergreen topic guard for short clarifications 
# Ограничение evergreen по смене темы (для коротких уточнений)
JINX_EVERGREEN_TOPIC_GUARD=true
# Max length of StateFrame (characters) 
# Максимальная длина StateFrame (в символах)
JINX_STATEFRAME_MAXCHARS=800
# Compact StateFrames: every N turns merge K latest frames into "concept frame" (future) 
# Компактизация StateFrames: каждые N ходов собираем K последних фреймов в «concept frame» (в будущем)
JINX_STATEFRAME_COMPACT_N=6
JINX_STATEFRAME_RECENT_K=8
# Merge clarifiers into sub-queries in advisory mode (default: yes) 
# Сливать clarifiers в sub-queries в advisory-режиме (по умолчанию: да)
JINX_CHAINED_CLARIFY_AS_SUBS=true

# Semantic question detector (threshold) 
# Семантический детектор вопросов (порог)
JINX_QSEM_THRESHOLD=0.18

# -----------------------------------------------
# Prompt Macros / Динамическая композиция подсказок
# -----------------------------------------------
# Max number of {{m:*}} macro expansions per request 
# Максимальное число разворачиваний макросов {{m:*}} на один запрос
JINX_PROMPT_MACRO_MAX=50
# Enable tracing errors from macro providers to BLUE_WHISPERS 
# Включить трассировку ошибок от макропровайдеров в BLUE_WHISPERS
JINX_PROMPT_MACRO_TRACE=false

# Built-in m:emb provider defaults 
# Настройки по умолчанию для встроенного провайдера m:emb
# Top-K results to include when N is omitted 
# Число Top-K результатов для включения, если N не указано
JINX_MACRO_EMB_TOPK=3
# Time budget (ms) for m:emb retrieval 
# Лимит времени (мс) для получения результатов через m:emb
JINX_MACRO_EMB_MS=180
# Max characters per preview snippet in m:emb 
# Максимальное число символов в превью-сниппете в m:emb
JINX_MACRO_EMB_PREVIEW_CHARS=160

# -----------------------------------------------
# Planner Kernels / Повторно используемый вспомогательный код
# -----------------------------------------------
# Max characters allowed for <plan_kernels> code (sanitized). Default: 3000 
# Максимальное число символов для кода <plan_kernels> (после очистки). По умолчанию: 3000
JINX_KERNEL_MAXCHARS=3000
# Preload sanitized <plan_kernels> into execution globals before <python_{key}> (false by default) 
# Предзагружать очищенные <plan_kernels> в execution globals перед <python_{key}> (по умолчанию: false)
JINX_KERNELS_PRELOAD=false
